{"version":3,"sources":["components/Form/index.js","index.js"],"names":["Form","props","handleFormSubmit","e","preventDefault","axios","method","url","process","headers","data","state","then","result","sent","setState","mailSent","error","catch","message","handleChange","field","value","target","updateValue","this","config","title","successMessage","errorMessage","fieldsConfig","className","action","map","Fragment","key","id","type","label","klassName","placeholder","name","onChange","fieldName","onClick","React","Component","api","fields","firstName","lastName","email","msg","isRequired","ReactDOM","render","document","getElementById"],"mappings":"4RAkGeA,G,kBAxFb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAWRC,iBAAmB,SAAAC,GACjBA,EAAEC,iBACFC,IAAM,CACJC,OAAQ,OACRC,IAAI,GAAD,OAAKC,2CACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAM,EAAKC,QAEVC,MAAK,SAAAC,GACAA,EAAOH,KAAKI,MACd,EAAKC,SAAS,CACZC,SAAUH,EAAOH,KAAKI,OAExB,EAAKC,SAAS,CAAEE,OAAO,KAEvB,EAAKF,SAAS,CAAEE,OAAO,OAG1BC,OAAM,SAAAD,GAAK,OAAI,EAAKF,SAAS,CAAEE,MAAOA,EAAME,cA9B9B,EAsCnBC,aAAe,SAACjB,EAAGkB,GACjB,IAAIC,EAAQnB,EAAEoB,OAAOD,MACjBE,EAAc,GAClBA,EAAYH,GAASC,EACrB,EAAKP,SAASS,IAxCd,EAAKb,MAAQ,CACXK,UAAU,EACVC,MAAO,MAJQ,E,sEA6CT,IAAD,SACuDQ,KAAKxB,MAAMyB,OAAjEC,EADD,EACCA,MAAOC,EADR,EACQA,eAAgBC,EADxB,EACwBA,aAAcC,EADtC,EACsCA,aAC7C,OACE,yBAAKC,UAAU,OACb,4BAAKJ,GACL,6BACE,0BAAMK,OAAO,KACVF,GACCA,EAAaG,KAAI,SAAAZ,GACf,OACE,kBAAC,IAAMa,SAAP,CAAgBC,IAAKd,EAAMe,IACT,aAAff,EAAMgB,KACL,kBAAC,IAAMH,SAAP,KACE,+BAAQb,EAAMiB,OACd,2BACED,KAAMhB,EAAMgB,KACZN,UAAWV,EAAMkB,UACjBC,YAAanB,EAAMmB,YACnBlB,MAAOD,EAAMoB,KACbC,SAAU,SAAAvC,GAAC,OAAI,EAAKiB,aAAajB,EAAGkB,EAAMsB,eAI9C,kBAAC,IAAMT,SAAP,KACE,+BAAQb,EAAMiB,OACd,8BAAUP,UAAWV,EAAMkB,UAAWC,YAAanB,EAAMmB,YAAaE,SAAU,SAAAvC,GAAC,OAAI,EAAKiB,aAAajB,EAAGkB,EAAMsB,YAAYrB,MAAOD,EAAMoB,YAMrJ,2BAAOJ,KAAK,SAASO,QAAS,SAAAzC,GAAC,OAAI,EAAKD,iBAAiBC,IAAImB,MAAM,WACnE,6BACGG,KAAKd,MAAMK,UAAY,yBAAKe,UAAU,WAAWH,GACjDH,KAAKd,MAAMM,OAAS,yBAAKc,UAAU,SAASF,W,GAhFxCgB,IAAMC,YCInBpB,EAAS,CACbqB,IAAI,GAAD,OAAKvC,2CACRmB,MAAO,aACPC,eAAgB,8BAChBC,aAAc,+BACdmB,OAAO,CACLC,UAAW,GACXC,SAAU,GACVC,MAAO,GACPC,IAAK,IAEPtB,aAAe,CACd,CAAEM,GAAI,EAAGE,MAAO,aAAcK,UAAW,YAAaN,KAAM,OAAOG,YAAY,kBAAmBa,YAAY,EAAOd,UAAU,oBAC/H,CAAEH,GAAI,EAAGE,MAAO,YAAaK,UAAW,WAAYN,KAAM,OAAQG,YAAa,iBAAkBa,YAAY,EAAOd,UAAU,mBAC9H,CAAEH,GAAI,EAAGE,MAAO,QAASK,UAAW,QAASN,KAAM,QAASG,YAAa,cAAea,YAAY,EAAOd,UAAU,eACrH,CAAEH,GAAI,EAAGE,MAAO,UAAWK,UAAW,MAAON,KAAM,WAAWG,YAAY,uBAAwBa,YAAY,EAAOd,UAAU,mBAGlIe,IAASC,OAAO,kBAAC,EAAD,CAAM7B,OAAQA,IAAY8B,SAASC,eAAe,W","file":"static/js/main.a50129ab.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport \"./styles.css\";\n\n/**\n * @component Form\n * @props - { object } -  config\n */\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mailSent: false,\n      error: null\n    };\n  }\n  /**\n  * @function handleFormSubmit\n  * @param e { obj } - form event\n  * @return void\n  */\n  handleFormSubmit = e => {\n    e.preventDefault();\n    axios({\n      method: \"post\",\n      url: `${process.env.REACT_APP_API}`,\n      headers: { \"content-type\": \"application/json\" },\n      data: this.state\n    })\n      .then(result => {\n        if (result.data.sent) {\n          this.setState({\n            mailSent: result.data.sent\n          });\n          this.setState({ error: false });\n        } else {\n          this.setState({ error: true });\n        }\n      })\n      .catch(error => this.setState({ error: error.message }));\n  };\n  /**\n    * @function handleChange\n    * @param e { obj } - change event\n    * @param field { string } - namve of the field\n    * @return void\n    */\n  handleChange = (e, field) => {\n    let value = e.target.value;\n    let updateValue = {};\n    updateValue[field] = value;\n    this.setState(updateValue);\n  };\n\n  render() {\n    const { title, successMessage, errorMessage, fieldsConfig } = this.props.config;\n    return (\n      <div className=\"App\">\n        <h2>{title}</h2>\n        <div>\n          <form action=\"#\">\n            {fieldsConfig &&\n              fieldsConfig.map(field => {\n                return (\n                  <React.Fragment key={field.id}>\n                    {field.type !== \"textarea\" ? (\n                      <React.Fragment>\n                        <label>{field.label}</label>\n                        <input\n                          type={field.type}\n                          className={field.klassName}\n                          placeholder={field.placeholder}\n                          value={field.name}\n                          onChange={e => this.handleChange(e, field.fieldName)}\n                        />\n                      </React.Fragment>\n                    ) : (\n                      <React.Fragment>\n                        <label>{field.label}</label>\n                        <textarea className={field.klassName} placeholder={field.placeholder} onChange={e => this.handleChange(e, field.fieldName)} value={field.name} />\n                      </React.Fragment>\n                    )}\n                  </React.Fragment>\n                );\n              })}\n            <input type=\"submit\" onClick={e => this.handleFormSubmit(e)} value=\"Submit\" />\n            <div>\n              {this.state.mailSent && <div className=\"sucsess\">{successMessage}</div>}\n              {this.state.error && <div className=\"error\">{errorMessage}</div>}\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Form;\n//propTypes for the component\nForm.propTypes = {\n  config: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Form from '../src/components/Form';\n\n/**\n * @config prepareing config prop.\n * api: url for the server endpoint\n * title: form title\n * successMessage: message will show in the UI when mail is successfully sent.\n * errorMessage: message will show in the UI when mail is not sent.\n * fields: this is the name of each field. This should be exact order of the fieldsConfig and fieldsConfig.fieldName should be  the same\n * fieldsConfig = settings for each input/textarea field\n */\nconst config = {\n  api: `${process.env.REACT_APP_API}`,\n  title: 'Contact Me',\n  successMessage: 'Thank you for contcting me.',\n  errorMessage: 'Sorry we have some problems.',\n  fields:{\n    firstName: '',\n    lastName: '',\n    email: '',\n    msg: ''\n  },\n  fieldsConfig:  [\n   { id: 1, label: 'First Name', fieldName: 'firstName', type: 'text',placeholder:'Your First Name', isRequired: true , klassName:'first-name-field'},\n   { id: 2, label: 'Last Name', fieldName: 'lastName', type: 'text', placeholder: 'Your Last Name', isRequired: true , klassName:'last-name-field'},\n   { id: 3, label: 'Email', fieldName: 'email', type: 'email', placeholder: ' Your Email', isRequired: true , klassName:'email-field'},\n   { id: 4, label: 'Message', fieldName: 'msg', type: 'textarea',placeholder:'Write something.....', isRequired: true , klassName:'message-field'}\n  ]\n}\nReactDOM.render(<Form config={config} />, document.getElementById('root'));\n"],"sourceRoot":""}